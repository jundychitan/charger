#!/bin/bash
project_dir=/projects/charger
nfc_file=/var/txtalert/nfc.id
employee_list=/projects/charger/employee_list
charging_list=/projects/charger/charging_list
slot_list=/projects/charger/slot_list
config_file_dir=/projects/config_file
sensor_dir=/projects/txtalert/config/sensor_status
light_dir=/projects/charger/pixel_led/light
blink_dir=/projects/charger/pixel_led/blink
kbd_file=/var/txtalert/kbd
filename=$nfc_file

#door sensor
open=0
close=1
#solenoid lock
lock=0
unlock=1

open_door_timeout=10 	#timeout for door opening
close_door_timeout=20 	#timeout for door closing
door_lock_timeout=30	#time delay until lock

timestamp(){
	date +"%Y%m%d%H%M%S"
}
map_sensor(){ #map slot to sensor address
	case $1 in
		0)
			echo "1_0"
			;;
		1)
			echo "1_1"
			;;
		2)
			echo "1_2"
			;;
		3)
			echo "1_3"
			;;
		4)
			echo "1_4"
			;;
		9)
			echo "2_0"
			;;
		8)
			echo "2_1"
			;;
		7)
			echo "2_2"
			;;
		6)
			echo "2_3"
			;;
		5)
			echo "2_4"
			;;
		10)
			echo "4_0"
			;;
		11)
			echo "4_1"
			;;
		12)
			echo "4_2"
			;;
		13)
			echo "4_3"
			;;
		14)
			echo "4_4"
			;;
		19)
			echo "5_0"
			;;
		18)
			echo "5_1"
			;;
		17)
			echo "5_2"
			;;
		16)
			echo "5_3"
			;;
		15)
			echo "5_4"
			;;			
	esac
}
map_relay(){ #map slot to relay address
	case $1 in
		0)
			echo "1_0"
			;;
		1)
			echo "2_0"
			;;
		2)
			echo "3_0"
			;;
		3)
			echo "4_0"
			;;
		4)
			echo "5_0"
			;;
		9)
			echo "1_1"
			;;
		8)
			echo "2_1"
			;;
		7)
			echo "3_1"
			;;
		6)
			echo "4_1"
			;;
		5)
			echo "5_1"
			;;
		10)
			echo "1_2"
			;;
		11)
			echo "2_2"
			;;
		12)
			echo "3_2"
			;;
		13)
			echo "4_2"
			;;
		14)
			echo "5_2"
			;;
		19)
			echo "1_3"
			;;
		18)
			echo "2_3"
			;;
		17)
			echo "3_3"
			;;
		16)
			echo "4_3"
			;;
		15)
			echo "5_3"
			;;			
	esac
}
wait_for_door_event(){
	slot=$1
	timeout=$2	
	inotifywait -t $timeout -q -e close_write $sensor_dir  | while read res
	do
		#echo $res
		dir=$(echo $res |awk '{print $1}')$(echo $res |awk '{print $3}')
		sensor_file_name=$(echo $res |awk '{print $3}')
		event=$(echo $res |awk '{print $2}')
		#echo $sensor_file_name
		sensor=$(map_sensor $slot)
		if [ "$sensor_file_name" == "$sensor" ]; then
			if [ "$event" != "DELETE" ];
			then
				#echo "file changed: $dir"
				sensor_name=$(cat $dir |awk -F, '{print $1}')
				bit=$(cat $dir |awk -F, '{print $2}')
				#echo $sensor_name
				#echo $bit
				if [ $bit -eq $open ]; then
					echo "door opened"
				else
					echo "door closed"
				fi				
			fi
			break
		fi
	done
}
control_relay(){
	addr_bit=$(map_relay $1)
	addr=$(echo $addr_bit |awk -F_ '{print $1}')
	bit=$(echo $addr_bit |awk -F_ '{print $2}')
	#generate random filename for can command
	file_name=$(cat /dev/urandom | tr -dc "[:alpha:]" | head -c 8)
	
	#send command to can
	if [ ! -d /var/txtalert/command ];
	then
		mkdir /var/txtalert/command
	fi
	echo -e "SID_H:04\r\nSID_L:$addr\r\nD0:FF\r\nD1:01\r\nD2:$bit\r\nD3:1\r\nD4:$2">/var/txtalert/command/$file_name
	echo -e "SID_H:04\r\nSID_L:$addr\r\nD0:FF\r\nD1:01\r\nD2:$bit\r\nD3:1\r\nD4:$2"
}
control_relay_delay(){
	addr_bit=$(map_relay $1)
	addr=$(echo $addr_bit |awk -F_ '{print $1}')
	bit=$(echo $addr_bit |awk -F_ '{print $2}')
	#generate random filename for can command
	file_name=$(cat /dev/urandom | tr -dc "[:alpha:]" | head -c 8)
	
	#send command to can
	if [ ! -d /var/txtalert/command ];
	then
		mkdir /var/txtalert/command
	fi
	echo -e "SID_H:04\r\nSID_L:$addr\r\nD0:FF\r\nD1:01\r\nD2:$bit\r\nD3:2\r\nD4:$2">/var/txtalert/command/$file_name
	echo -e "SID_H:04\r\nSID_L:$addr\r\nD0:FF\r\nD1:01\r\nD2:$bit\r\nD3:2\r\nD4:$2"
}
refresh_led(){
	echo "allleds=0"> /dev/ttyS0
	for d in {0..19} ; do
		#echo "$d"
		#addr=$(basename "$d")
		addr=$blink_dir/$d
		if [ -f $addr ]; then
			#echo $addr
			value=$(cat "$addr")
			#echo $value
			_addr=$(basename $addr)
			#echo $_addr
			echo "setblink=$_addr,$value"> /dev/ttyS0
			sleep 0.01
		fi
	done

	#for d in /projects/charger/pixel_led/light/* ; do
	for d in {0..19} ; do
		#echo "$d"
		#addr=$(basename "$d")
		addr=$light_dir/$d
		if [ -f $addr ]; then
			#echo $addr
			value=$(cat "$addr")
			_addr=$(basename $addr)
			#echo $_addr
			#echo $value
			echo "setled=$_addr,$value"> /dev/ttyS0
			sleep 0.01
		fi
	done
}
lightup_led(){ #params: 1 slot 2 color 3 blink
	echo "allleds=0"> /dev/ttyS0
	sleep 0.1
	echo "setblink=$1,$3"> /dev/ttyS0
	sleep 0.1
	echo "setled=$1,$2"> /dev/ttyS0
	sleep 0.1
}
save_led(){
	echo "$3"> $blink_dir/$1
	sleep 0.1
	echo "$2"> $light_dir/$1
	sleep 0.1
	refresh_led
}

stty -F /dev/ttyS0 9600 -opost
echo "color"> /dev/ttyS0

sleep 5
refresh_led

while inotifywait -q -e modify $filename >/dev/null; 
do
	#echo "file is changed"
	nfc_id=$(cat $nfc_file)	
	nfc_id=${nfc_id,,}
	#echo $nfc_id
	employee=$(grep -w $nfc_id $employee_list)
	
echo $employee
	if [ $? -eq 0 ]; then
		IFS=',' read -ra employee_id <<< "$employee"	
		emp_id=${employee_id[1]}
		designation=${employee_id[2]}
		#echo $emp_id
		if [ "$designation" == "supervisor" ]; then #supervisor
			echo "fire"> /dev/ttyS0
			#read -t 1 -n 10000 discard #discard buffer before reading
			#read -t 5 -p "you are supervisor.. select door to unlock: " -a slot
			kbd_event=$(inotifywait -t 30 -q -e modify $kbd_file)
			if [ ${#kbd_event} -gt 0 ];then
				slot=$(cat $kbd_file)
				re='^[0-9]+$'
				if [[ $slot =~ $re ]] ; then
					if [ $slot -ge 0 -a $slot -le 19 ];then
						echo "slot selected: $slot"
						selected=$(grep -w "slot $slot" $charging_list)
						if [ $? -eq 0 ]; then #slot is in list
							IFS=',' read -ra id <<< "$selected"
							echo ${id[0]}
							echo "unlocking slot no.: $slot"
							#unlock door and wait until door is opened
							lightup_led $slot ffffff 1
							control_relay_delay $slot $door_lock_timeout							
							door_status=$(wait_for_door_event $slot $open_door_timeout)
							echo $door_status
							if [ "$door_status" == "door opened" ]; then
								sed -i "/${id[0]}/d" $charging_list
								lightup_led $slot ff00 1															
								#control_relay $slot $lock
								door_status=$(wait_for_door_event $slot $close_door_timeout)
								echo $door_status
								if [ "$door_status" == "door closed" ]; then
									control_relay $slot $lock
									save_led $slot ff00 0
								else #wait indefinetely if door not closed within prescribed time				
									lightup_led $slot ffffff 1
									while [ 1 ];
									do
										door_status=$(wait_for_door_event $slot 0)
										echo $door_status
										if [ "$door_status" == "door closed" ]; then
											control_relay $slot $lock
											save_led $slot ff00 0
											echo "door closed"
											break
										fi
									done
								fi									
								
							else
								echo "not opened"
								refresh_led
								control_relay $slot $lock
							fi
						else #slot seletected no in list
							echo "slot not occupied..opening it anyway"
							lightup_led $slot ffffff 1
							control_relay_delay $slot $door_lock_timeout							
							door_status=$(wait_for_door_event $slot $open_door_timeout)
							echo $door_status
							if [ "$door_status" == "door opened" ]; then
								lightup_led $slot ff00 1															
								#control_relay $slot $lock
								door_status=$(wait_for_door_event $slot $close_door_timeout)
								echo $door_status
								if [ "$door_status" == "door closed" ]; then	
									control_relay $slot $lock
									save_led $slot ff00 0
								else
									lightup_led $slot ffffff 1
									while [ 1 ];
									do
										door_status=$(wait_for_door_event $slot 0)
										echo $door_status
										if [ "$door_status" == "door closed" ]; then
											control_relay $slot $lock
											refresh_led
											echo "door closed"
											break
										fi
									done								
								fi
							else
								echo "not opened"
								refresh_led
								control_relay $slot $lock							
							fi
						fi
					else
						refresh_led
						echo "invalid slot seletected.."
					fi	
				else
					refresh_led
					echo "invalid selection.."
				fi
			else
				refresh_led
				echo
				echo "no doors selected"
			fi
		else #employee
			charging_employee=$(grep -w $nfc_id $charging_list)
			if [ $? -eq 1 ]; then #inbound
				echo "look for slot available"	
				slot_found=0
				for i in {0..19}
				do
					slot_avail=$(grep -w "slot $i" $charging_list)
					if [ $? -eq 1 ]; then # slot is not in list, so its available
						echo "available slot# $i"	
						slot=$i
						slot_found=1
						lightup_led $slot ffffff 0				
						#unlock door and wait until door is opened						
						control_relay_delay $slot $door_lock_timeout
						door_status=$(wait_for_door_event $slot $open_door_timeout)
						echo $door_status
						if [ "$door_status" == "door opened" ]; then
							#echo "door_opened"
							echo "${employee_id[1]},$(timestamp),slot $i">> $charging_list
							echo "employee added to charging list"
							lightup_led $slot ff0000 1														
							#control_relay $slot $lock
							door_status=$(wait_for_door_event $slot $close_door_timeout)
							echo $door_status
							if [ "$door_status" == "door closed" ]; then
								control_relay $slot $lock
								save_led $slot ff0000 0
							else #wait indefinetely if door not closed within prescribed time				
								lightup_led $slot ffffff 1
								while [ 1 ];
								do
									door_status=$(wait_for_door_event $slot 0)
									echo $door_status
									if [ "$door_status" == "door closed" ]; then
										control_relay $slot $lock
										save_led $slot ff0000 0
										echo "door closed"
										break
									fi
								done
							fi																														
						else
							echo "not opened"
							refresh_led
							control_relay $slot $lock
							
						fi
						echo "done"	
						break
					fi
				done
				if [ $slot_found -eq 0 ]; then
					refresh_led
					echo "no slot available..."
				fi
			else #outbound
				echo "existing.. will delete from list"
				IFS=',' read -ra employee_id <<< "$charging_employee"
				echo "employee id: ${employee_id[0]}"
				echo "datetime   : ${employee_id[1]}"
				IFS=' ' read -ra slot <<< "${employee_id[2]}"
				slot=${slot[1]}
				echo "slot no    : $slot"
				seconds1=$(date --date "$(echo "${employee_id[1]}" | sed -nr 's/(....)(..)(..)(..)(..)(..)/\1-\2-\3 \4:\5:\6/p')" +%s)
				seconds2=$(date --date "$(echo "$(timestamp)" | sed -nr 's/(....)(..)(..)(..)(..)(..)/\1-\2-\3 \4:\5:\6/p')" +%s)
				delta=$((seconds2 - seconds1))
				echo "$delta seconds"  
				
				#echo "allleds=0"> /dev/ttyS0
				#sleep 0.1
				#echo "setblink=$slot,1"> /dev/ttyS0
				#sleep 0.1
				#echo "setled=$slot,ffffff"> /dev/ttyS0
				lightup_led $slot ffffff 1
				
				#unlock door and wait until door is opened
				control_relay_delay $slot $door_lock_timeout
				door_status=$(wait_for_door_event $slot $open_door_timeout)
				echo $door_status
				if [ "$door_status" == "door opened" ]; then
					#echo "setled=$slot,ff00"> /dev/ttyS0
					lightup_led $slot ff00 1
					echo "door_opened"
					sed -i "/$emp_id/d" $charging_list
					#now lock the door and wait till closed
					#control_relay $slot $lock
					door_status=$(wait_for_door_event $slot $close_door_timeout)
					echo $door_status
					if [ "$door_status" == "door closed" ]; then
						echo "door_closed"	
						control_relay $slot $lock
						save_led $slot ff00 0
						echo "door_closed"
					else #wait indefinetely if door not closed within prescribed time				
						echo "not closed... wait until closed"
						lightup_led $slot ffffff 1
						while [ 1 ];
						do
							door_status=$(wait_for_door_event $slot 0)
							echo $door_status
							if [ "$door_status" == "door closed" ]; then
								control_relay $slot $lock
								save_led $slot ff00 0
								echo "door closed"
								break
							fi
						done
					fi							
				else
					echo "not opened"
					refresh_led
					control_relay $slot $lock
				fi				
				echo "done"	
			fi
		fi
	else
		echo "employee not found..."
		read -t 2 -p "Add ID? (y/n)" -a answer -N 1; echo
		if [ "$answer" == "y" ]; then
			echo "employee added.."
			echo "0001,$nfc_id">>$employee_list
		else	
			echo "not added.."
		fi
	fi
done
